# Automatically generated by Pynguin.
import pytest
import src.display_number as module_0


def test_case_0():
    try:
        float_0 = -1850.768749
        str_0 = ']\x0c*K01c@k(J-9xa90\t5M'
        number_display_0 = module_0.NumberDisplay(float_0, str_0)
        assert number_display_0.value == pytest.approx(-1850.768749, abs=
            0.01, rel=0.01)
        assert number_display_0.limit == ']\x0c*K01c@k(J-9xa90\t5M'
        var_0 = number_display_0.str()
        assert var_0 == '0-1850.768749'
        str_1 = '&gmyT'
        dict_0 = {str_1: str_1}
        number_display_1 = module_0.NumberDisplay(str_1, dict_0)
        assert number_display_1.value == '&gmyT'
        assert number_display_1.limit == {'&gmyT': '&gmyT'}
        var_1 = number_display_1.str()
    except BaseException:
        pass


def test_case_1():
    try:
        bytes_0 = b'\xbeAa\x94\xf8q\xab/\xe8PM4\xd5\xfa'
        dict_0 = {bytes_0: bytes_0}
        int_0 = -2767
        int_1 = 1144
        str_0 = '\x0bmGvnz'
        number_display_0 = module_0.NumberDisplay(int_1, str_0)
        assert number_display_0.value == 1144
        assert number_display_0.limit == '\x0bmGvnz'
        var_0 = number_display_0.str()
        assert var_0 == '1144'
        number_display_1 = module_0.NumberDisplay(int_0, str_0)
        assert number_display_1.value == -2767
        assert number_display_1.limit == '\x0bmGvnz'
        number_display_2 = module_0.NumberDisplay(dict_0, int_0)
        assert number_display_2.value == {
            b'\xbeAa\x94\xf8q\xab/\xe8PM4\xd5\xfa':
            b'\xbeAa\x94\xf8q\xab/\xe8PM4\xd5\xfa'}
        assert number_display_2.limit == -2767
        set_0 = {int_0, number_display_0, number_display_0, number_display_1}
        number_display_3 = module_0.NumberDisplay(str_0, set_0)
        assert number_display_3.value == '\x0bmGvnz'
        assert len(number_display_3.limit) == 3
        var_1 = number_display_2.increase()
    except BaseException:
        pass


def test_case_2():
    try:
        str_0 = 'N;)z0w~N\t;(|]VR3@\\!'
        dict_0 = {str_0: str_0}
        number_display_0 = module_0.NumberDisplay(str_0, dict_0)
        assert number_display_0.value == 'N;)z0w~N\t;(|]VR3@\\!'
        assert number_display_0.limit == {'N;)z0w~N\t;(|]VR3@\\!':
            'N;)z0w~N\t;(|]VR3@\\!'}
        var_0 = number_display_0.invariant()
    except BaseException:
        pass


def test_case_3():
    try:
        str_0 = 'y~NKNS@1-3S3'
        float_0 = -2343.21
        number_display_0 = module_0.NumberDisplay(str_0, float_0)
        assert number_display_0.value == 'y~NKNS@1-3S3'
        assert number_display_0.limit == pytest.approx(-2343.21, abs=0.01,
            rel=0.01)
        float_1 = -3153.532
        number_display_1 = module_0.NumberDisplay(number_display_0, float_1)
        assert number_display_1.limit == pytest.approx(-3153.532, abs=0.01,
            rel=0.01)
        var_0 = number_display_1.increase()
    except BaseException:
        pass
