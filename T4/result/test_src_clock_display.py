# Automatically generated by Pynguin.
import src.clock_display as module_0


def test_case_0():
    str_0 = '"8j3oJ(y'
    bytes_0 = b'\x98]2\x80@\xbc\xb4\xa19\xe9\xf8\xe8\x16\xb7'
    clock_display_0 = module_0.ClockDisplay(bytes_0)
    assert len(clock_display_0.numbers) == 14
    var_0 = clock_display_0.invariant()
    clock_display_1 = module_0.ClockDisplay(str_0)
    assert len(clock_display_1.numbers) == 8


def test_case_1():
    bytes_0 = b''
    list_0 = []
    clock_display_0 = module_0.ClockDisplay(list_0)
    assert clock_display_0.numbers == []
    var_0 = clock_display_0.str()
    clock_display_1 = module_0.ClockDisplay(bytes_0)
    assert clock_display_1.numbers == []
    var_1 = clock_display_1.str()


def test_case_2():
    bytes_0 = b'\xb2\x9a\x00\xf9'
    clock_display_0 = module_0.ClockDisplay(bytes_0)
    assert len(clock_display_0.numbers) == 4
    var_0 = clock_display_0.increment()
    assert var_0 is None
    var_1 = clock_display_0.invariant()
    assert var_1 is False
    var_2 = clock_display_0.str()
    assert var_2 == '00:00:00:01'
    var_3 = clock_display_0.increment()
    assert var_3 is None
    var_4 = clock_display_0.clone()
    assert len(var_4.numbers) == 4
    var_5 = clock_display_0.str()
    assert var_5 == '00:00:00:02'
    var_6 = clock_display_0.clone()
    assert len(var_6.numbers) == 4
    var_7 = clock_display_0.increment()
    assert var_7 is None
    var_8 = clock_display_0.clone()
    assert len(var_8.numbers) == 4
    var_9 = clock_display_0.increment()
    assert var_9 is None
    var_10 = clock_display_0.increment()
    assert var_10 is None
    str_0 = 'o&%I:/oVa^G-^w?Mr'
    clock_display_1 = module_0.ClockDisplay(str_0)
    assert len(clock_display_1.numbers) == 17
    var_11 = clock_display_1.clone()
    assert len(var_11.numbers) == 17
    var_12 = clock_display_0.str()
    assert var_12 == '00:00:00:05'
    var_13 = clock_display_0.clone()
    assert len(var_13.numbers) == 4
    bytes_1 = b'\xe3UN\xe4E\x13\x9d!pO\x1cLw\xb1\x06'
    clock_display_2 = module_0.ClockDisplay(bytes_1)
    assert len(clock_display_2.numbers) == 15
    var_14 = clock_display_2.invariant()
    assert var_14 is True
    var_15 = clock_display_2.clone()
    assert len(var_15.numbers) == 15


def test_case_3():
    bytes_0 = b'\x18\xab'
    list_0 = []
    clock_display_0 = module_0.ClockDisplay(list_0)
    assert clock_display_0.numbers == []
    var_0 = clock_display_0.str()
    var_1 = clock_display_0.invariant()
    var_2 = clock_display_0.str()
    var_3 = clock_display_0.increment()
    assert var_3 is None
    clock_display_1 = module_0.ClockDisplay(list_0)
    assert clock_display_1.numbers == []
    var_4 = clock_display_1.increment()
    assert var_4 is None
    var_5 = clock_display_0.clone()
    assert var_5.numbers == []
    var_6 = clock_display_1.str()
    assert var_6 == ''
    str_0 = 'p7p0{'
    clock_display_2 = module_0.ClockDisplay(str_0)
    assert len(clock_display_2.numbers) == 5
    var_7 = clock_display_2.str()
    assert var_7 == '00:00:00:00:00'
    clock_display_3 = module_0.ClockDisplay(bytes_0)
    assert len(clock_display_3.numbers) == 2
    set_0 = set()
    clock_display_4 = module_0.ClockDisplay(set_0)
    assert clock_display_4.numbers == []
    var_8 = clock_display_4.clone()
    assert var_8.numbers == []
